<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Nico Westerbeck</title>
    <link>https://nico-westerbeck.de/blog/</link>
    <description>Recent content in Blogs on Nico Westerbeck</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 26 Apr 2017 11:54:59 +0300</lastBuildDate>
    
	<atom:link href="https://nico-westerbeck.de/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Functional web programming</title>
      <link>https://nico-westerbeck.de/blog/functional_web/</link>
      <pubDate>Wed, 26 Apr 2017 11:54:59 +0300</pubDate>
      
      <guid>https://nico-westerbeck.de/blog/functional_web/</guid>
      <description>Introduction I recently tried to dive into functional programming and the longer I do that, the more I am amazed by how it feels to code functional. Thing is, all those languages provide quite an entrance barrier if you come from one of the common languages like PHP, Python or whatever. Even JS doesn&amp;rsquo;t really feel too functional to me, as things like binding functions is still pretty unhandy and the callback hell is just not very nice to read through.</description>
    </item>
    
    <item>
      <title>Setting up a docker-compose environment for the OMS</title>
      <link>https://nico-westerbeck.de/blog/docker-compose/</link>
      <pubDate>Tue, 15 Nov 2016 17:00:00 +0000</pubDate>
      
      <guid>https://nico-westerbeck.de/blog/docker-compose/</guid>
      <description>Introduction At first I used this file only as a help for myself, but I thought I could also share my thoughts. The project was to set up a docker environment for a microservice architecture consisting of the following parts. This was specifically done for the OMS
 OMS-Core, consisting of  nginx php-fpm A workspace container with php artisan, composer, etc postgres A data container for the whole repo  OMS-Events, consisting of  node.</description>
    </item>
    
    <item>
      <title>Notification pipelines</title>
      <link>https://nico-westerbeck.de/blog/notification-pipeline/</link>
      <pubDate>Mon, 10 Oct 2016 20:00:00 +0000</pubDate>
      
      <guid>https://nico-westerbeck.de/blog/notification-pipeline/</guid>
      <description>Introduction In this post I will share some thoughts upon implementing a notification pipeline in a microservice architecture. It should be said though that I don&amp;rsquo;t yet have much practical experiences, this post is rather designed as a discussion about the topic. While working on the OMS for AEGEE, I found that this topic is actually quite a tough point when developing a distributed application.
 A lot of microservices will want to generate notifications for different things, resulting in a high number of notifications and a high diversity Users want to control how and which notifications they want Notifications need to be managed centrally, as it would get inconsistend having the notification settings everywhere Certain events could potentially trigger a high notification throughput (a huge event gets canceled, popular news post) There are several channels how notifications can be distributed: Mail, Pop-up notification, Push-notifications, Chat integration, &amp;hellip;  The good thing is that this topic is not necessarily time-critical.</description>
    </item>
    
    <item>
      <title>Memorizing strong passwords</title>
      <link>https://nico-westerbeck.de/blog/easy-passwords/</link>
      <pubDate>Sun, 25 Sep 2016 23:00:00 +0000</pubDate>
      
      <guid>https://nico-westerbeck.de/blog/easy-passwords/</guid>
      <description>Though this is not really a too groundbreaking article, I noticed that quite a lot of my friends didn&amp;rsquo;t know the trick, so I thought I could share it.
Intro Nowadays there are some requirements to a good password, most people know them
 Entropy - Mixed case, special characters, no natural language words&amp;hellip; I personally think this is not too important and makes passwords harder to remember while not increasing strength too much.</description>
    </item>
    
    <item>
      <title>Microservice testing with Apiary</title>
      <link>https://nico-westerbeck.de/blog/microservice-testing/</link>
      <pubDate>Sun, 25 Sep 2016 17:00:00 +0000</pubDate>
      
      <guid>https://nico-westerbeck.de/blog/microservice-testing/</guid>
      <description>Introduction I assume you are generally familiar with microservices, otherwise I can recommend this article for further reading. Lets also assume we have a basic microservice architecture set up. So, why and how do we test it? Why: I won&amp;rsquo;t even start preaching about tests, just write a bigger project without testing. I guess every programmer has to do that at some point of his life. How: Most of the tests, and for some services all of the tests will be very straight-forward.</description>
    </item>
    
    <item>
      <title>Setting up this webspace</title>
      <link>https://nico-westerbeck.de/blog/setting-up-website/</link>
      <pubDate>Sat, 24 Sep 2016 17:00:00 +0000</pubDate>
      
      <guid>https://nico-westerbeck.de/blog/setting-up-website/</guid>
      <description>As this was my today&amp;rsquo;s project, I will lose some words about how I set up this site.
Hosting I am hosting at uberspace, a very hipster shared hoster, which let&amp;rsquo;s you choose your price yourself. Their hosting principle is a multi-user linux environment, where you automatically get a user assigned and some stuff provisioned. It relies on linux unprivileged users as the only isolation from other users on the same machine, so I would not recommend using the space for anything critical.</description>
    </item>
    
  </channel>
</rss>